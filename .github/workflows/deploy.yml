name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the main branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package*.json'
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Install dependencies (if needed)
        run: |
          # Only install if package.json exists in root
          if [ -f package.json ]; then
            npm ci
          fi
          
      - name: Build project
        run: |
          # Create build directory
          mkdir -p _site
          
          # Copy all static files to _site directory
          cp -r *.html _site/ 2>/dev/null || :
          cp -r *.css _site/ 2>/dev/null || :
          cp -r js/ _site/ 2>/dev/null || :
          cp -r docs/ _site/ 2>/dev/null || :
          cp -r assets/ _site/ 2>/dev/null || :
          cp -r images/ _site/ 2>/dev/null || :
          
          # Copy documentation files
          cp README.md _site/ 2>/dev/null || :
          cp LICENSE _site/ 2>/dev/null || :
          cp CONTRIBUTING.md _site/ 2>/dev/null || :
          
          # Ensure index.html exists (primary entry point)
          if [ ! -f _site/index.html ] && [ -f _site/gem-optimizer.html ]; then
            cp _site/gem-optimizer.html _site/index.html
          fi
          
          # Create a simple index if none exists
          if [ ! -f _site/index.html ]; then
            cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>GEM T2 Controller Optimizer</title>
              <meta http-equiv="refresh" content="0; url=gem-optimizer.html">
          </head>
          <body>
              <h1>GEM T2 Controller Optimizer</h1>
              <p>Redirecting to the main application...</p>
              <p><a href="gem-optimizer.html">Click here if not redirected automatically</a></p>
          </body>
          </html>
          EOF
          fi
          
          # Create .nojekyll file to prevent Jekyll processing
          touch _site/.nojekyll
          
          # List files for debugging
          echo "Files in _site directory:"
          ls -la _site/
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4