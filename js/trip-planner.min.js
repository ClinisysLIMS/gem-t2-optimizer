class TripPlanner{constructor(){this.currentStep=1,this.totalSteps=4,this.tripData={location:{destination:"",startPoint:"",coordinates:null},date:{startDate:"",endDate:"",duration:1},details:{eventType:"",description:"",estimatedDistance:0},passengers:{count:2,cargoLoad:"light",specialRequirements:[]}},this.weatherData=null,this.terrainData=null,this.isModalOpen=!1,this.apis={weather:{baseUrl:"https://api.openweathermap.org/data/2.5",apiKey:"YOUR_API_KEY_HERE",endpoints:{current:"/weather",forecast:"/forecast"}},terrain:{baseUrl:"https://api.mapbox.com",apiKey:"YOUR_API_KEY_HERE",endpoints:{elevation:"/v4/mapbox.mapbox-terrain-v2/tilequery",geocoding:"/geocoding/v5/mapbox.places"}}},this.initializeModal()}initializeModal(){document.getElementById("trip-planner-modal")||this.createModalHTML(),this.attachModalEventListeners()}createModalHTML(){const e=`\n            <div id="trip-planner-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">\n                <div class="relative top-20 mx-auto p-5 border w-full max-w-4xl shadow-lg rounded-md bg-white">\n                    <div class="mt-3">\n                        \x3c!-- Modal Header --\x3e\n                        <div class="flex justify-between items-center mb-6">\n                            <div>\n                                <h3 class="text-2xl font-bold text-gray-900">üìÖ Weekend Outing Trip Planner</h3>\n                                <p class="text-sm text-gray-600 mt-1">Plan your GEM outing with weather and terrain optimization</p>\n                            </div>\n                            <button id="close-trip-modal" class="text-gray-400 hover:text-gray-600">\n                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>\n                                </svg>\n                            </button>\n                        </div>\n                        \n                        \x3c!-- Progress Bar --\x3e\n                        <div class="mb-8">\n                            <div class="flex justify-between text-xs text-gray-500 mb-2">\n                                <span>Step <span id="trip-current-step">1</span> of ${this.totalSteps}</span>\n                                <span id="trip-step-name">Location</span>\n                            </div>\n                            <div class="w-full bg-gray-200 rounded-full h-2">\n                                <div id="trip-progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 25%"></div>\n                            </div>\n                        </div>\n                        \n                        \x3c!-- Step Content --\x3e\n                        <div id="trip-modal-content">\n                            ${this.generateStepHTML(1)}\n                        </div>\n                        \n                        \x3c!-- Modal Footer --\x3e\n                        <div class="flex justify-between items-center mt-8 pt-6 border-t">\n                            <button id="trip-prev-btn" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed" disabled>\n                                Previous\n                            </button>\n                            <div class="flex space-x-3">\n                                <button id="trip-cancel-btn" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">\n                                    Cancel\n                                </button>\n                                <button id="trip-next-btn" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">\n                                    Next Step\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;document.body.insertAdjacentHTML("beforeend",e)}generateStepHTML(e){switch(e){case 1:return this.generateLocationStepHTML();case 2:return this.generateDateStepHTML();case 3:return this.generateDetailsStepHTML();case 4:return this.generatePassengersStepHTML();default:return""}}generateLocationStepHTML(){return`\n            <div class="space-y-6">\n                <div>\n                    <h4 class="text-lg font-semibold mb-4">üó∫Ô∏è Trip Location</h4>\n                    <p class="text-sm text-gray-600 mb-6">Enter your starting point and destination for route analysis</p>\n                </div>\n                \n                <div class="grid md:grid-cols-2 gap-6">\n                    <div>\n                        <label for="trip-start-point" class="block text-sm font-medium text-gray-700 mb-2">\n                            Starting Point\n                        </label>\n                        <input type="text" id="trip-start-point" \n                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"\n                               placeholder="e.g., San Francisco, CA"\n                               value="${this.tripData.location.startPoint}">\n                        <p class="text-xs text-gray-500 mt-1">Your current location or trip starting point</p>\n                    </div>\n                    \n                    <div>\n                        <label for="trip-destination" class="block text-sm font-medium text-gray-700 mb-2">\n                            Destination *\n                        </label>\n                        <input type="text" id="trip-destination" \n                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"\n                               placeholder="e.g., Yosemite National Park"\n                               value="${this.tripData.location.destination}" required>\n                        <p class="text-xs text-gray-500 mt-1">Your primary destination</p>\n                    </div>\n                </div>\n                \n                <div id="location-suggestions" class="hidden">\n                    <h5 class="font-medium text-gray-700 mb-2">Popular GEM Destinations:</h5>\n                    <div class="grid grid-cols-2 md:grid-cols-3 gap-2">\n                        ${this.getPopularDestinations().map((e=>`\n                            <button type="button" class="destination-suggestion text-left p-2 text-sm border border-gray-200 rounded hover:bg-blue-50 hover:border-blue-300">\n                                ${e}\n                            </button>\n                        `)).join("")}\n                    </div>\n                </div>\n                \n                <div class="bg-blue-50 border-l-4 border-blue-400 p-4">\n                    <div class="flex">\n                        <div class="flex-shrink-0">\n                            <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">\n                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>\n                            </svg>\n                        </div>\n                        <div class="ml-3">\n                            <p class="text-sm text-blue-700">\n                                <strong>Tip:</strong> We'll analyze the route between your starting point and destination to optimize controller settings for terrain and distance.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `}generateDateStepHTML(){const e=(new Date).toISOString().split("T")[0],t=new Date;t.setMonth(t.getMonth()+6);const n=t.toISOString().split("T")[0],a=window.weatherService&&window.weatherService.isConfigured(),i=window.terrainService&&window.terrainService.isMapboxConfigured();return`\n            <div class="space-y-6">\n                <div>\n                    <h4 class="text-lg font-semibold mb-4">üìÖ Trip Dates</h4>\n                    <p class="text-sm text-gray-600 mb-6">Select your trip dates for weather forecasting</p>\n                </div>\n                \n                ${a?"":'\n                    <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6">\n                        <div class="flex">\n                            <div class="flex-shrink-0">\n                                <svg class="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">\n                                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>\n                                </svg>\n                            </div>\n                            <div class="ml-3">\n                                <h4 class="text-sm font-medium text-yellow-800">Weather API Configuration</h4>\n                                <p class="mt-1 text-sm text-yellow-700">\n                                    Configure your OpenWeatherMap API key for real weather data\n                                </p>\n                                <div class="mt-3">\n                                    <div class="flex space-x-2">\n                                        <input type="text" id="weather-api-key" \n                                               class="flex-1 px-3 py-2 border border-yellow-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-yellow-500"\n                                               placeholder="Enter your OpenWeatherMap API key">\n                                        <button id="save-weather-key" \n                                                class="px-4 py-2 bg-yellow-600 text-white text-sm rounded-md hover:bg-yellow-700">\n                                            Save\n                                        </button>\n                                    </div>\n                                    <p class="mt-1 text-xs text-yellow-600">\n                                        Get a free API key at <a href="https://openweathermap.org/api" target="_blank" class="underline">openweathermap.org</a>\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                '}\n                \n                ${i?"":'\n                    <div class="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6">\n                        <div class="flex">\n                            <div class="flex-shrink-0">\n                                <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">\n                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>\n                                </svg>\n                            </div>\n                            <div class="ml-3">\n                                <h4 class="text-sm font-medium text-blue-800">Enhanced Terrain Analysis (Optional)</h4>\n                                <p class="mt-1 text-sm text-blue-700">\n                                    Configure Mapbox API key for detailed elevation analysis and precise route grading\n                                </p>\n                                <div class="mt-3">\n                                    <div class="flex space-x-2">\n                                        <input type="text" id="mapbox-api-key" \n                                               class="flex-1 px-3 py-2 border border-blue-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"\n                                               placeholder="Enter your Mapbox API key (optional)">\n                                        <button id="save-mapbox-key" \n                                                class="px-4 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700">\n                                            Save\n                                        </button>\n                                    </div>\n                                    <p class="mt-1 text-xs text-blue-600">\n                                        Get a free API key at <a href="https://account.mapbox.com/" target="_blank" class="underline">mapbox.com</a>. Free tier includes 50,000 requests/month.\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                '}\n                \n                <div class="grid md:grid-cols-2 gap-6">\n                    <div>\n                        <label for="trip-start-date" class="block text-sm font-medium text-gray-700 mb-2">\n                            Start Date *\n                        </label>\n                        <input type="date" id="trip-start-date" \n                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"\n                               min="${e}" max="${n}"\n                               value="${this.tripData.date.startDate}" required>\n                    </div>\n                    \n                    <div>\n                        <label for="trip-end-date" class="block text-sm font-medium text-gray-700 mb-2">\n                            End Date\n                        </label>\n                        <input type="date" id="trip-end-date" \n                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"\n                               min="${e}" max="${n}"\n                               value="${this.tripData.date.endDate}">\n                        <p class="text-xs text-gray-500 mt-1">Leave blank for single-day trip</p>\n                    </div>\n                </div>\n                \n                <div id="weather-preview" class="hidden bg-gray-50 rounded-lg p-4">\n                    <h5 class="font-medium text-gray-700 mb-2">üå§Ô∏è Weather Preview</h5>\n                    <div id="weather-preview-content">\n                        \x3c!-- Weather data will be loaded here --\x3e\n                    </div>\n                </div>\n                \n                <div class="bg-green-50 border-l-4 border-green-400 p-4">\n                    <div class="flex">\n                        <div class="flex-shrink-0">\n                            <svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">\n                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>\n                            </svg>\n                        </div>\n                        <div class="ml-3">\n                            <p class="text-sm text-green-700">\n                                <strong>Trip Analysis:</strong> ${a?"Real-time weather data from OpenWeatherMap.":"Weather estimates based on season and location."} ${i?"Detailed terrain analysis via Mapbox elevation data.":"Basic terrain analysis using free elevation services."}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `}generateDetailsStepHTML(){return`\n            <div class="space-y-6">\n                <div>\n                    <h4 class="text-lg font-semibold mb-4">üéØ Trip Details</h4>\n                    <p class="text-sm text-gray-600 mb-6">Tell us about your outing type and requirements</p>\n                </div>\n                \n                <div>\n                    <label for="trip-event-type" class="block text-sm font-medium text-gray-700 mb-2">\n                        Event Type *\n                    </label>\n                    <select id="trip-event-type" \n                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" required>\n                        <option value="">Select event type...</option>\n                        <option value="camping" ${"camping"===this.tripData.details.eventType?"selected":""}>üèïÔ∏è Camping Trip</option>\n                        <option value="touring" ${"touring"===this.tripData.details.eventType?"selected":""}>üó∫Ô∏è Sightseeing Tour</option>\n                        <option value="parade" ${"parade"===this.tripData.details.eventType?"selected":""}>üéâ Parade/Festival</option>\n                        <option value="beach" ${"beach"===this.tripData.details.eventType?"selected":""}>üèñÔ∏è Beach Outing</option>\n                        <option value="mountains" ${"mountains"===this.tripData.details.eventType?"selected":""}>‚õ∞Ô∏è Mountain Adventure</option>\n                        <option value="shopping" ${"shopping"===this.tripData.details.eventType?"selected":""}>üõçÔ∏è Shopping Trip</option>\n                        <option value="family" ${"family"===this.tripData.details.eventType?"selected":""}>üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family Outing</option>\n                        <option value="photography" ${"photography"===this.tripData.details.eventType?"selected":""}>üì∏ Photography Trip</option>\n                        <option value="other" ${"other"===this.tripData.details.eventType?"selected":""}>üé≠ Other</option>\n                    </select>\n                </div>\n                \n                <div>\n                    <label for="trip-description" class="block text-sm font-medium text-gray-700 mb-2">\n                        Trip Description\n                    </label>\n                    <textarea id="trip-description" rows="3"\n                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"\n                              placeholder="Describe your trip activities, special requirements, or any additional details...">${this.tripData.details.description}</textarea>\n                </div>\n                \n                <div>\n                    <label for="trip-estimated-distance" class="block text-sm font-medium text-gray-700 mb-2">\n                        Estimated Total Distance (miles)\n                    </label>\n                    <input type="number" id="trip-estimated-distance" min="1" max="200"\n                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"\n                           placeholder="e.g., 25"\n                           value="${this.tripData.details.estimatedDistance||""}">\n                    <p class="text-xs text-gray-500 mt-1">Total driving distance for the entire trip (will be auto-calculated if left blank)</p>\n                </div>\n                \n                <div id="event-specific-tips" class="bg-yellow-50 border-l-4 border-yellow-400 p-4">\n                    <div class="flex">\n                        <div class="flex-shrink-0">\n                            <svg class="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">\n                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>\n                            </svg>\n                        </div>\n                        <div class="ml-3">\n                            <p class="text-sm text-yellow-700" id="event-tip-text">\n                                Select an event type to see specific optimization tips.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `}generatePassengersStepHTML(){return`\n            <div class="space-y-6">\n                <div>\n                    <h4 class="text-lg font-semibold mb-4">üë• Passengers & Cargo</h4>\n                    <p class="text-sm text-gray-600 mb-6">Configure passenger count and cargo load for optimal performance</p>\n                </div>\n                \n                <div class="grid md:grid-cols-2 gap-6">\n                    <div>\n                        <label for="trip-passenger-count" class="block text-sm font-medium text-gray-700 mb-2">\n                            Total Passengers\n                        </label>\n                        <select id="trip-passenger-count" \n                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">\n                            <option value="1" ${1===this.tripData.passengers.count?"selected":""}>1 Person</option>\n                            <option value="2" ${2===this.tripData.passengers.count?"selected":""}>2 People</option>\n                            <option value="3" ${3===this.tripData.passengers.count?"selected":""}>3 People</option>\n                            <option value="4" ${4===this.tripData.passengers.count?"selected":""}>4 People</option>\n                            <option value="5" ${5===this.tripData.passengers.count?"selected":""}>5 People</option>\n                            <option value="6" ${6===this.tripData.passengers.count?"selected":""}>6 People</option>\n                        </select>\n                    </div>\n                    \n                    <div>\n                        <label for="trip-cargo-load" class="block text-sm font-medium text-gray-700 mb-2">\n                            Cargo Load\n                        </label>\n                        <select id="trip-cargo-load" \n                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">\n                            <option value="light" ${"light"===this.tripData.passengers.cargoLoad?"selected":""}>üéí Light (personal items only)</option>\n                            <option value="medium" ${"medium"===this.tripData.passengers.cargoLoad?"selected":""}>üß≥ Medium (day trip supplies)</option>\n                            <option value="heavy" ${"heavy"===this.tripData.passengers.cargoLoad?"selected":""}>üì¶ Heavy (camping gear, coolers)</option>\n                            <option value="maximum" ${"maximum"===this.tripData.passengers.cargoLoad?"selected":""}>üöõ Maximum (full cargo capacity)</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div>\n                    <label class="block text-sm font-medium text-gray-700 mb-3">\n                        Special Requirements\n                    </label>\n                    <div class="space-y-2">\n                        ${this.getSpecialRequirements().map((e=>`\n                            <label class="flex items-center">\n                                <input type="checkbox" class="special-requirement h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" \n                                       value="${e.value}" ${this.tripData.passengers.specialRequirements.includes(e.value)?"checked":""}>\n                                <span class="ml-2 text-sm text-gray-700">${e.icon} ${e.label}</span>\n                            </label>\n                        `)).join("")}\n                    </div>\n                </div>\n                \n                <div id="load-analysis" class="bg-gray-50 rounded-lg p-4">\n                    <h5 class="font-medium text-gray-700 mb-2">üìä Load Analysis</h5>\n                    <div id="load-analysis-content">\n                        \x3c!-- Load analysis will be calculated here --\x3e\n                    </div>\n                </div>\n                \n                <div class="bg-purple-50 border-l-4 border-purple-400 p-4">\n                    <div class="flex">\n                        <div class="flex-shrink-0">\n                            <svg class="h-5 w-5 text-purple-400" fill="currentColor" viewBox="0 0 20 20">\n                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>\n                            </svg>\n                        </div>\n                        <div class="ml-3">\n                            <p class="text-sm text-purple-700">\n                                <strong>Performance Impact:</strong> Higher passenger count and cargo load will reduce acceleration and hill climbing ability, but we'll optimize settings accordingly.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `}getPopularDestinations(){return["Yosemite National Park","Lake Tahoe","Monterey Bay","Big Sur","Napa Valley","Santa Barbara"]}getSpecialRequirements(){return[{value:"mobility",icon:"‚ôø",label:"Mobility assistance needed"},{value:"elderly",icon:"üë¥",label:"Elderly passengers"},{value:"children",icon:"üë∂",label:"Small children/car seats"},{value:"pets",icon:"üêï",label:"Pets accompanying"},{value:"medical",icon:"‚öïÔ∏è",label:"Medical equipment"},{value:"photography",icon:"üì∑",label:"Photography equipment"}]}attachModalEventListeners(){document.getElementById("close-trip-modal")?.addEventListener("click",(()=>{this.closeModal()})),document.getElementById("trip-cancel-btn")?.addEventListener("click",(()=>{this.closeModal()})),document.getElementById("trip-next-btn")?.addEventListener("click",(()=>{this.nextStep()})),document.getElementById("trip-prev-btn")?.addEventListener("click",(()=>{this.previousStep()})),document.getElementById("trip-planner-modal")?.addEventListener("click",(e=>{"trip-planner-modal"===e.target.id&&this.closeModal()})),this.attachStepEventListeners()}attachStepEventListeners(){document.getElementById("trip-destination")?.addEventListener("input",(()=>{this.showLocationSuggestions()})),document.querySelectorAll(".destination-suggestion").forEach((e=>{e.addEventListener("click",(e=>{document.getElementById("trip-destination").value=e.target.textContent.trim(),this.hideLocationSuggestions()}))})),document.getElementById("trip-start-date")?.addEventListener("change",(()=>{this.updateEndDateMin(),this.loadWeatherPreview()})),document.getElementById("trip-end-date")?.addEventListener("change",(()=>{this.calculateTripDuration()})),document.getElementById("save-weather-key")?.addEventListener("click",(()=>{this.saveWeatherApiKey()})),document.getElementById("weather-api-key")?.addEventListener("keypress",(e=>{"Enter"===e.key&&this.saveWeatherApiKey()})),document.getElementById("save-mapbox-key")?.addEventListener("click",(()=>{this.saveMapboxApiKey()})),document.getElementById("mapbox-api-key")?.addEventListener("keypress",(e=>{"Enter"===e.key&&this.saveMapboxApiKey()})),document.getElementById("trip-event-type")?.addEventListener("change",(()=>{this.updateEventSpecificTips()})),document.getElementById("trip-passenger-count")?.addEventListener("change",(()=>{this.updateLoadAnalysis()})),document.getElementById("trip-cargo-load")?.addEventListener("change",(()=>{this.updateLoadAnalysis()})),document.querySelectorAll(".special-requirement").forEach((e=>{e.addEventListener("change",(()=>{this.updateLoadAnalysis()}))}))}openModal(){this.isModalOpen=!0,document.getElementById("trip-planner-modal").classList.remove("hidden"),document.body.style.overflow="hidden",setTimeout((()=>{const e=document.querySelector("#trip-planner-modal input, #trip-planner-modal select");e&&e.focus()}),100)}closeModal(){this.isModalOpen=!1,document.getElementById("trip-planner-modal").classList.add("hidden"),document.body.style.overflow="",this.currentStep=1,this.updateModalContent()}nextStep(){this.validateCurrentStep()&&(this.saveCurrentStepData(),this.currentStep<this.totalSteps?(this.currentStep++,this.updateModalContent()):this.finalizeTripPlan())}previousStep(){this.currentStep>1&&(this.currentStep--,this.updateModalContent())}updateModalContent(){const e=this.currentStep/this.totalSteps*100;document.getElementById("trip-progress-bar").style.width=`${e}%`,document.getElementById("trip-current-step").textContent=this.currentStep;document.getElementById("trip-step-name").textContent=["Location","Dates","Details","Passengers"][this.currentStep-1],document.getElementById("trip-modal-content").innerHTML=this.generateStepHTML(this.currentStep),document.getElementById("trip-prev-btn").disabled=1===this.currentStep,document.getElementById("trip-next-btn").textContent=this.currentStep===this.totalSteps?"Plan Trip":"Next Step",this.attachStepEventListeners(),this.loadStepSpecificData()}validateCurrentStep(){const e=[];switch(this.currentStep){case 1:document.getElementById("trip-destination")?.value||e.push("Destination is required");break;case 2:document.getElementById("trip-start-date")?.value||e.push("Start date is required");break;case 3:document.getElementById("trip-event-type")?.value||e.push("Event type is required")}return!(e.length>0)||(alert("Please complete all required fields:\n"+e.join("\n")),!1)}saveCurrentStepData(){switch(this.currentStep){case 1:this.tripData.location.startPoint=document.getElementById("trip-start-point")?.value||"",this.tripData.location.destination=document.getElementById("trip-destination")?.value||"";break;case 2:this.tripData.date.startDate=document.getElementById("trip-start-date")?.value||"",this.tripData.date.endDate=document.getElementById("trip-end-date")?.value||"",this.calculateTripDuration();break;case 3:this.tripData.details.eventType=document.getElementById("trip-event-type")?.value||"",this.tripData.details.description=document.getElementById("trip-description")?.value||"",this.tripData.details.estimatedDistance=parseInt(document.getElementById("trip-estimated-distance")?.value)||0;break;case 4:this.tripData.passengers.count=parseInt(document.getElementById("trip-passenger-count")?.value)||2,this.tripData.passengers.cargoLoad=document.getElementById("trip-cargo-load")?.value||"light",this.tripData.passengers.specialRequirements=Array.from(document.querySelectorAll(".special-requirement:checked")).map((e=>e.value))}}loadStepSpecificData(){switch(this.currentStep){case 2:this.loadWeatherPreview();break;case 3:this.updateEventSpecificTips();break;case 4:this.updateLoadAnalysis()}}showLocationSuggestions(){const e=document.getElementById("location-suggestions");e&&e.classList.remove("hidden")}hideLocationSuggestions(){const e=document.getElementById("location-suggestions");e&&e.classList.add("hidden")}updateEndDateMin(){const e=document.getElementById("trip-start-date")?.value,t=document.getElementById("trip-end-date");e&&t&&(t.min=e,t.value&&t.value<e&&(t.value=e))}calculateTripDuration(){const e=document.getElementById("trip-start-date")?.value,t=document.getElementById("trip-end-date")?.value;if(e)if(t&&t!==e){const n=new Date(e),a=new Date(t);this.tripData.date.duration=Math.ceil((a-n)/864e5)+1}else this.tripData.date.duration=1}saveWeatherApiKey(){const e=document.getElementById("weather-api-key"),t=document.getElementById("save-weather-key");if(!e||!t)return;const n=e.value.trim();if(n)if(/^[a-f0-9]{32}$/i.test(n)){if(window.weatherService){window.weatherService.setApiKey(n);const a=t.textContent;t.textContent="Saved!",t.className=t.className.replace("bg-yellow-600 hover:bg-yellow-700","bg-green-600 hover:bg-green-700"),setTimeout((()=>{t.textContent=a,t.className=t.className.replace("bg-green-600 hover:bg-green-700","bg-yellow-600 hover:bg-yellow-700"),this.updateModalContent()}),2e3),e.value=""}}else alert("Invalid API key format. OpenWeatherMap API keys are 32-character hexadecimal strings.");else alert("Please enter a valid API key")}saveMapboxApiKey(){const e=document.getElementById("mapbox-api-key"),t=document.getElementById("save-mapbox-key");if(!e||!t)return;const n=e.value.trim();if(n)if(/^pk\.[a-zA-Z0-9._-]+$/.test(n)){if(window.terrainService){window.terrainService.setMapboxApiKey(n);const a=t.textContent;t.textContent="Saved!",t.className=t.className.replace("bg-blue-600 hover:bg-blue-700","bg-green-600 hover:bg-green-700"),setTimeout((()=>{t.textContent=a,t.className=t.className.replace("bg-green-600 hover:bg-green-700","bg-blue-600 hover:bg-blue-700"),this.updateModalContent()}),2e3),e.value=""}}else alert('Invalid Mapbox API key format. Mapbox keys start with "pk." followed by alphanumeric characters.');else alert("Please enter a valid API key")}async loadWeatherPreview(){const e=this.tripData.location.destination,t=document.getElementById("trip-start-date")?.value;if(e&&t){const n=document.getElementById("weather-preview"),a=document.getElementById("weather-preview-content");if(n&&a){n.classList.remove("hidden"),a.innerHTML='<div class="text-center text-gray-500">Loading weather data...</div>';try{let n;n=window.weatherService&&window.weatherService.isConfigured()?await window.weatherService.getWeatherForDate(e,t):await this.getWeatherData(e,t),a.innerHTML=this.formatWeatherPreview(n)}catch(e){console.error("Weather preview error:",e),a.innerHTML=`\n                        <div class="text-red-500 text-sm">\n                            <div class="font-medium">Weather data unavailable</div>\n                            <div class="text-xs mt-1">${e.message||"Unknown error"}</div>\n                        </div>\n                    `}}}}formatWeatherPreview(e){const t=e.temperature||e.temperature?.avg||"N/A",n=e.temperatureRange?` (${e.temperatureRange.min}-${e.temperatureRange.max}¬∞F)`:"",a=e.conditions||e.description||"N/A",i=e.precipitation?.probability||e.precipitation||0,r=e.wind?.speed||e.windSpeed||"N/A",s=e.humidity||"N/A",o="openweathermap"===e.source?"üåê Live Data":"openweathermap-forecast"===e.source?"üåê Forecast":e.isEstimate?"üìä Estimate":"üîÆ Simulated";return`\n            <div class="space-y-3">\n                <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">\n                    <div class="text-center">\n                        <div class="font-medium">${t}¬∞F${n}</div>\n                        <div class="text-gray-500">Temperature</div>\n                    </div>\n                    <div class="text-center">\n                        <div class="font-medium">${a}</div>\n                        <div class="text-gray-500">Conditions</div>\n                    </div>\n                    <div class="text-center">\n                        <div class="font-medium">${"number"==typeof i?i>1?i.toFixed(1)+" in":Math.round(100*i)+"%":i}</div>\n                        <div class="text-gray-500">Precipitation</div>\n                    </div>\n                    <div class="text-center">\n                        <div class="font-medium">${r} mph</div>\n                        <div class="text-gray-500">Wind</div>\n                    </div>\n                </div>\n                \n                ${"N/A"!==s?`\n                    <div class="text-center text-xs text-gray-500">\n                        Humidity: ${s}% | ${o}\n                    </div>\n                `:`\n                    <div class="text-center text-xs text-gray-500">\n                        ${o}\n                    </div>\n                `}\n                \n                ${e.error?`\n                    <div class="text-xs text-yellow-600 text-center">\n                        ‚ö†Ô∏è ${e.error}\n                    </div>\n                `:""}\n            </div>\n        `}updateEventSpecificTips(){const e=document.getElementById("trip-event-type")?.value,t=document.getElementById("event-tip-text");if(t){const n={camping:"Camping trips require heavy load optimization and extended range settings for remote areas.",touring:"Touring trips benefit from balanced settings with emphasis on comfort and moderate speed.",parade:"Parade events need low-speed optimization with enhanced motor protection for stop-and-go driving.",beach:"Beach trips may involve sand and salt air - consider motor protection and corrosion resistance.",mountains:"Mountain adventures require maximum hill climbing power and regenerative braking optimization.",shopping:"Shopping trips involve frequent stops and urban driving - optimize for acceleration and efficiency.",family:"Family outings prioritize safety and comfort with gentle acceleration and stable handling.",photography:"Photography trips need quiet operation and precise speed control for stable shots.",other:"Custom event - settings will be optimized based on your specific requirements."};t.textContent=n[e]||"Select an event type to see specific optimization tips."}}updateLoadAnalysis(){const e=parseInt(document.getElementById("trip-passenger-count")?.value)||2,t=document.getElementById("trip-cargo-load")?.value||"light",n=Array.from(document.querySelectorAll(".special-requirement:checked")).map((e=>e.value)),a=document.getElementById("load-analysis-content");if(a){const i=this.calculateLoadFactors(e,t,n);a.innerHTML=this.formatLoadAnalysis(i)}}calculateLoadFactors(e,t,n){let a=160*e;a+={light:50,medium:150,heavy:300,maximum:500}[t]||0,n.includes("medical")&&(a+=30),n.includes("photography")&&(a+=20),n.includes("pets")&&(a+=25);const i=Math.min(a/1200*100,100);return{totalWeight:a,loadPercentage:i,accelerationImpact:Math.round(i/100*30),hillClimbingImpact:Math.round(i/100*25),rangeImpact:Math.round(i/100*15)}}formatLoadAnalysis(e){return`\n            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">\n                <div class="text-center">\n                    <div class="font-medium">${e.totalWeight} lbs</div>\n                    <div class="text-gray-500">Total Load</div>\n                </div>\n                <div class="text-center">\n                    <div class="font-medium">${Math.round(e.loadPercentage)}%</div>\n                    <div class="text-gray-500">Capacity</div>\n                </div>\n                <div class="text-center">\n                    <div class="font-medium text-orange-600">-${e.accelerationImpact}%</div>\n                    <div class="text-gray-500">Acceleration</div>\n                </div>\n                <div class="text-center">\n                    <div class="font-medium text-red-600">-${e.hillClimbingImpact}%</div>\n                    <div class="text-gray-500">Hill Climbing</div>\n                </div>\n            </div>\n        `}async finalizeTripPlan(){this.saveCurrentStepData(),document.getElementById("trip-modal-content").innerHTML='\n            <div class="text-center py-8">\n                <div class="spinner mb-4"></div>\n                <h4 class="text-lg font-semibold mb-2">Planning Your Trip</h4>\n                <p class="text-gray-600">Analyzing weather, terrain, and optimizing controller settings...</p>\n            </div>\n        ';try{window.weatherService&&window.weatherService.isConfigured()?this.weatherData=await window.weatherService.getWeatherForDate(this.tripData.location.destination,this.tripData.date.startDate):this.weatherData=await this.getWeatherData(this.tripData.location.destination,this.tripData.date.startDate),window.terrainService?this.terrainData=await window.terrainService.analyzeRoute(this.tripData.location.startPoint||"Current Location",this.tripData.location.destination):this.terrainData=await this.getTerrainData(this.tripData.location.startPoint,this.tripData.location.destination);const e=await this.generateTripOptimization();this.showTripPlanResults(e)}catch(e){console.error("Error finalizing trip plan:",e),this.showTripPlanError()}}showTripPlanResults(e){document.getElementById("trip-modal-content").innerHTML=`\n            <div class="space-y-6">\n                <div class="text-center">\n                    <h4 class="text-xl font-bold text-green-600 mb-2">üéâ Trip Plan Complete!</h4>\n                    <p class="text-gray-600">Your GEM has been optimized for the perfect outing</p>\n                    ${e.confidence?`<p class="text-sm text-gray-500 mt-1">Optimization confidence: ${e.confidence}%</p>`:""}\n                </div>\n                \n                <div class="grid md:grid-cols-2 gap-6">\n                    <div class="bg-blue-50 rounded-lg p-4">\n                        <h5 class="font-semibold mb-2">üå§Ô∏è Weather Forecast</h5>\n                        <div class="text-sm space-y-1">\n                            <div>Temperature: ${this.weatherData.temperature?.avg||this.weatherData.temperature||"N/A"}¬∞F</div>\n                            <div>Conditions: ${this.weatherData.conditions||"Clear"}</div>\n                            <div>Precipitation: ${this.weatherData.precipitation?.probability||this.weatherData.precipitation||0}%</div>\n                        </div>\n                    </div>\n                    \n                    <div class="bg-green-50 rounded-lg p-4">\n                        <h5 class="font-semibold mb-2">‚õ∞Ô∏è Terrain Analysis</h5>\n                        <div class="text-sm space-y-1">\n                            <div>Distance: ${this.terrainData.distance||this.terrainData.totalDistance||"N/A"} miles</div>\n                            <div>Elevation Gain: ${this.terrainData.elevationGain||"N/A"} ft</div>\n                            <div>Max Grade: ${this.terrainData.maxGrade||"N/A"}%</div>\n                            <div>Difficulty: ${this.terrainData.classification?.level||this.terrainData.terrainType||"Unknown"}</div>\n                            ${this.terrainData.difficultyScore?`<div>Score: ${this.terrainData.difficultyScore}/100</div>`:""}\n                        </div>\n                    </div>\n                </div>\n                \n                <div class="bg-purple-50 rounded-lg p-4">\n                    <h5 class="font-semibold mb-3">‚öôÔ∏è Controller Optimization</h5>\n                    <div class="text-sm space-y-2">\n                        ${e.changes.map((e=>`\n                            <div class="flex justify-between">\n                                <span>${e.description}</span>\n                                <span class="font-medium">${e.value}</span>\n                            </div>\n                        `)).join("")}\n                    </div>\n                </div>\n                \n                ${e.report?.expectedPerformance?`\n                <div class="bg-indigo-50 rounded-lg p-4">\n                    <h5 class="font-semibold mb-2">üìä Expected Performance</h5>\n                    <div class="text-sm space-y-1">\n                        <div>Estimated Range: ${e.report.expectedPerformance.estimatedRange} miles</div>\n                        <div>Top Speed: ${e.report.expectedPerformance.topSpeed} mph</div>\n                        <div>Hill Climbing: ${e.report.expectedPerformance.hillClimbingAbility}%</div>\n                        <div>Efficiency Rating: ${e.report.expectedPerformance.efficiencyRating}%</div>\n                    </div>\n                </div>\n                `:""}\n                \n                <div class="bg-yellow-50 rounded-lg p-4">\n                    <h5 class="font-semibold mb-2">üí° Trip Recommendations</h5>\n                    <ul class="text-sm space-y-1">\n                        ${e.recommendations.map((e=>`<li>‚Ä¢ ${e}</li>`)).join("")}\n                    </ul>\n                </div>\n            </div>\n        `,document.getElementById("trip-next-btn").textContent="Apply Settings",document.getElementById("trip-next-btn").onclick=()=>{this.applyTripOptimization(e)}}showTripPlanError(){document.getElementById("trip-modal-content").innerHTML='\n            <div class="text-center py-8">\n                <div class="text-red-500 mb-4">\n                    <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.93L13.732 4.242a2 2 0 00-3.464 0L3.34 16.07c-.77 1.263.192 2.93 1.732 2.93z"></path>\n                    </svg>\n                </div>\n                <h4 class="text-lg font-semibold mb-2">Planning Error</h4>\n                <p class="text-gray-600 mb-4">Unable to complete trip analysis. Using default weekend outing settings.</p>\n                <button onclick="window.uiController.selectPreset(\'weekend-outing\')" \n                        class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">\n                    Use Default Settings\n                </button>\n            </div>\n        '}applyTripOptimization(e){window.uiController&&(window.uiController.inputData.tripPlanning=this.tripData,window.uiController.inputData.tripOptimization=e,window.uiController.inputData.weatherData=this.weatherData,window.uiController.inputData.terrainData=this.terrainData,e.optimizedSettings&&(window.uiController.tripOptimizedSettings=e.optimizedSettings),window.uiController.selectPreset("weekend-outing")),this.closeModal()}async generateTripOptimization(){if(window.tripOptimizer)try{const e={vehicle:{model:window.uiController?.inputData?.vehicle?.model||"e4",topSpeed:window.uiController?.inputData?.vehicle?.topSpeed||25,motorCondition:window.uiController?.inputData?.vehicle?.motorCondition||"good"},battery:window.uiController?.inputData?.battery||{type:"lead",voltage:72,capacity:150,age:"good"},wheel:window.uiController?.inputData?.wheel||{tireDiameter:22,gearRatio:8.91},weather:this.weatherData,terrain:this.terrainData,location:this.tripData.location,date:this.tripData.date,details:this.tripData.details,passengers:this.tripData.passengers},t=await window.tripOptimizer.optimizeForTrip(e);if(t.success){const e=[],n=[];if(t.report?.keyOptimizations&&t.report.keyOptimizations.forEach((t=>{e.push({description:t.function,value:t.adjustment,reason:t.reason})})),t.report?.recommendations&&t.report.recommendations.forEach((e=>{e.items&&n.push(...e.items)})),t.report?.warnings&&t.report.warnings.forEach((e=>{n.push(`‚ö†Ô∏è ${e.message}`)})),t.report?.expectedPerformance){const e=t.report.expectedPerformance;n.push(`Expected range: ${e.estimatedRange} miles (${e.efficiencyRating}% efficiency)`)}return{changes:e.slice(0,10),recommendations:n.slice(0,8),optimizedSettings:t.optimization?.optimizedSettings||{},confidence:t.confidence||85,analysis:t.analysis,report:t.report}}}catch(e){console.error("TripOptimizer error:",e)}const e=[],t=[];if(this.weatherData){const n=this.weatherData.temperature?.avg||this.weatherData.temperature;n<40?(e.push({description:"F4 (Max Current) reduced for cold weather",value:"-10"}),t.push("Cold weather detected: Battery performance may be reduced by 15-20%")):n>85&&(e.push({description:"F4 (Max Current) reduced for heat protection",value:"-15"}),e.push({description:"F6 (Acceleration) gentler for motor cooling",value:"+5"}),t.push("Hot weather: Monitor motor temperature and take breaks as needed"));(this.weatherData.precipitation?.probability||this.weatherData.precipitation||0)>30&&(e.push({description:"F9 (Regen) enhanced for wet conditions",value:"+10"}),t.push("Rain expected: Reduce speed and increase following distance"))}if(this.terrainData){const n=this.terrainData.maxGrade,a=this.terrainData.elevationGain,i=this.terrainData.difficultyScore,r=this.terrainData.distance||this.terrainData.totalDistance;n>20?(e.push({description:"F7 (Min Field) maximized for extreme climbs",value:"+12"}),e.push({description:"F4 (Max Current) boosted for power",value:"+15"}),e.push({description:"F24 (Field Weakening) minimized for torque",value:"+15"}),t.push("Extreme grades detected: Verify route is suitable for GEM vehicle"),t.push("Consider alternative route if possible")):n>15?(e.push({description:"F7 (Min Field) increased for hill climbing",value:"+8"}),e.push({description:"F24 (Field Weakening) delayed for torque",value:"+10"}),t.push("Steep terrain: Use low gear and monitor motor temperature on climbs")):n>10&&(e.push({description:"F7 (Min Field) optimized for moderate hills",value:"+5"}),t.push("Moderate hills: Maintain steady speed on climbs")),a>2e3?(e.push({description:"F10 (Regen Field) maximized for descents",value:"+20"}),e.push({description:"F9 (Regen) enhanced for energy recovery",value:"+12"}),t.push("Significant elevation gain: Take advantage of regenerative braking"),t.push("Plan for 20-30% range reduction due to climbing")):a>1e3&&(e.push({description:"F9 (Regen) optimized for energy recovery",value:"+8"}),t.push("Moderate elevation gain: Use regenerative braking on descents")),r>40&&(e.push({description:"F3 (Acceleration) tuned for efficiency",value:"+3"}),e.push({description:"F6 (Accel Rate) gentled for range",value:"+2"}),t.push("Long distance: Plan charging stops and drive conservatively")),i>80?(t.push("Extreme terrain difficulty: Consider professional route assessment"),t.push("Ensure emergency communication devices are available")):i>60&&(t.push("Challenging terrain: Allow extra time and plan rest stops"),t.push("Monitor battery levels closely throughout journey")),this.terrainData.recommendations&&t.push(...this.terrainData.recommendations.slice(0,3))}return this.calculateLoadFactors(this.tripData.passengers.count,this.tripData.passengers.cargoLoad,this.tripData.passengers.specialRequirements).loadPercentage>70&&(e.push({description:"F4 (Max Current) increased for heavy load",value:"+10"}),e.push({description:"F10 (Regen Field) enhanced for braking",value:"+15"}),t.push("Heavy load: Allow extra distance for braking and reduced acceleration")),"parade"===this.tripData.details.eventType?(e.push({description:"F3 (Acceleration) gentled for parade speeds",value:"+5"}),t.push("Parade driving: Maintain steady low speeds and avoid sudden movements")):"camping"===this.tripData.details.eventType&&(e.push({description:"F26 (Field Ratio) optimized for loaded touring",value:"+1"}),t.push("Camping trip: Check tire pressure and secure all cargo before departure")),0===t.length&&t.push("Enjoy your trip! Settings have been optimized for your specific conditions"),t.push("Always save your original settings before making changes"),t.push("Test drive at low speeds first to verify optimal performance"),{changes:e,recommendations:t}}async getWeatherData(e,t){try{const n=await this.geocodeLocation(e),a=new Date(t);return Math.ceil((a-new Date)/864e5)<=5?await this.getWeatherForecast(n.lat,n.lon,a):this.getHistoricalWeather(n.lat,n.lon,a)}catch(e){return console.error("Weather API error:",e),this.getDefaultWeather()}}async getWeatherForecast(e,t,n){const a=this.getSeasonalTemp(n),i=["Clear","Partly Cloudy","Cloudy","Light Rain"][Math.floor(4*Math.random())];return{temperature:Math.round(a+(20*Math.random()-10)),conditions:i,precipitation:i.includes("Rain")?Math.round(60*Math.random()+20):Math.round(20*Math.random()),windSpeed:Math.round(15*Math.random()+5),humidity:Math.round(30*Math.random()+40)}}async getTerrainData(e,t){const n=t.toLowerCase();let a="mixed",i=8,r=Math.round(50*Math.random()+20);return n.includes("mountain")||n.includes("yosemite")?(a="steep",i=18):n.includes("hill")?(a="moderate",i=12):(n.includes("beach")||n.includes("coast"))&&(a="flat",i=4),{distance:r,maxGrade:i,avgGrade:Math.round(.4*i),elevationGain:Math.round(50*i),classification:a}}async geocodeLocation(e){const t={yosemite:{lat:37.8651,lng:-119.5383},"san francisco":{lat:37.7749,lng:-122.4194},"los angeles":{lat:34.0522,lng:-118.2437},default:{lat:37.3861,lng:-122.0839}},n=e.toLowerCase();for(const[e,a]of Object.entries(t))if(n.includes(e))return{lat:a.lat,lon:a.lng};return t.default}getSeasonalTemp(e){const t=new Date(e).getMonth();return t>=11||t<=2?45:t>=3&&t<=5?65:t>=6&&t<=8?85:60}getDefaultWeather(){return{temperature:{min:60,max:75,avg:68},conditions:"clear",precipitation:{probability:10,amount:0},wind:{speed:5,direction:"W"},humidity:50}}getDefaultTerrain(){return{totalDistance:10,elevationGain:100,elevationLoss:100,maxGrade:8,avgGrade:4,terrainType:"rolling"}}generateRecommendations(e,t){const n={settings:{},tips:[],warnings:[]};return e.weather&&(e.weather.temperature.max>85&&(n.tips.push("High temperatures expected - consider reducing acceleration settings to prevent motor overheating"),n.settings.temperatureMode="hot"),e.weather.precipitation.probability>50&&(n.tips.push("Rain likely - regenerative braking may be less effective on wet surfaces"),n.warnings.push("Wet conditions - allow extra stopping distance"))),e.terrain&&(e.terrain.maxGrade>15&&(n.tips.push("Steep hills detected - ensure battery is fully charged"),n.settings.hillMode="steep"),e.terrain.totalDistance>20&&(n.tips.push("Long distance trip - optimize for range over performance"),n.settings.rangeMode="extended")),n}}window.TripPlanner=TripPlanner,"undefined"!=typeof module&&module.exports&&(module.exports=TripPlanner);