class PDFParser{constructor(){this.patterns={geSentryComplete:/F\.?\s*No\.?\s*(\d+)\s+([A-Za-z][A-Za-z\s\-\_]+?)\s+Counts\s*[:=]?\s*(\d+)\s+Value\s*[:=]?\s*(\d+)/gi,geSentryWithValue:/F\.?\s*No\.?\s*(\d+)[\s\S]*?Counts\s*[:=]?\s*(\d+)\s*Value\s*[:=]?\s*(\d+)/gi,geSentrySimple:/F\.?\s*No\.?\s*(\d+)[\s\S]*?Counts\s*[:=]?\s*(\d+)/gi,geControllerTable:/F\.No\.\s*(\d+)[\s\S]*?Counts\s*[:=]?\s*(\d+)/gi,geControllerSimple:/F\.?\s*No\.?\s*(\d+)\s*[:=]?\s*(\d+)/gi,geControllerDirect:/F\.?\s*(\d+)\s*[:=]?\s*(\d+)/gi,functionVariations:[/F\.?\s*No\.?\s*(\d+)\s*[:=]?\s*(\d+)/gi,/F\.?\s*(\d+)\s*[:=]?\s*(\d+)/gi,/Function\s*(\d+)\s*[:=]?\s*(\d+)/gi,/Func\\.?\s*(\d+)\s*[:=]?\s*(\d+)/gi,/F\s*\.\s*(\d+)\s*[:=]?\s*(\d+)/gi,/F\s*(\d+)\s*[:=\-\s]+(\d+)/gi,/\bF(\d+)\s+(\d+)\b/gi],simpleFormat:[/^(\d{1,3})\s+(\d{1,3})$/gim,/^(\d{1,3})\s*[:=]\s*(\d{1,3})$/gim,/^(\d{1,3})\s+\S+\s+(\d{1,3})$/gim,/^(\d{1,3})[^\d]+(\d{1,3})$/gim],tableFormats:[/(\d{1,3})\s+([A-Za-z][A-Za-z\s\-\_]*?)\s+(\d{1,3})(?:\s+\S+)?/gim,/F\.?\s*(\d{1,3})\s+([A-Za-z][A-Za-z\s\-\_]*?)\s+(\d{1,3})/gim,/(\d{1,3})\s{2,}(\S.*?\S)\s{2,}(\d{1,3})/gim],tableRowPattern:/(\d{1,3})\s+([A-Za-z][A-Za-z\s\-\_]*?)\s+(\d{1,3})/gim,tableRowPatternAlt:/F\.?\s*(\d{1,3})\s+([A-Za-z][A-Za-z\s\-\_]*?)\s+(\d{1,3})/gim,tableRowWithFNo:/F\.No\.\s*(\d{1,3})\s*([A-Za-z][A-Za-z\s\-\_]*?)\s*(\d{1,3})/gim,tableHeader:/F\.?\s*No\.?\s*Function\s*Description\s*Counts\s*Value/gi,functionWithName:/F\.?\s*(\d+)\s+([A-Za-z][A-Za-z\s\-\_]+)/gi,functionNumber:/F\.?\s*No\.?\s*(\d+)/gi,originalOptimized:/Original\s*[:=]?\s*(\d+)\s*Optimized\s*[:=]?\s*(\d+)/gi,beforeAfter:/Before\s*[:=]?\s*(\d+)\s*After\s*[:=]?\s*(\d+)/gi,factoryModified:/Factory\s*[:=]?\s*(\d+)\s*Modified\s*[:=]?\s*(\d+)/gi,currentNew:/Current\s*[:=]?\s*(\d+)\s*New\s*[:=]?\s*(\d+)/gi,stockCustom:/Stock\s*[:=]?\s*(\d+)\s*Custom\s*[:=]?\s*(\d+)/gi,valuePatterns:{counts:/Counts\s*[:=]?\s*(\d+)/gi,value:/Value\s*[:=]?\s*(\d+)/gi,setting:/Setting\s*[:=]?\s*(\d+)/gi,current:/Current\s*[:=]?\s*(\d+)/gi,default:/Default\s*[:=]?\s*(\d+)/gi},exportFormats:{sentry:[/Function\s+(\d+)\s*\-\s*(.+?):\s*(\d+)/gi,/F(\d+)\s*\-\s*(.+?):\s*(\d+)/gi,/Func\s*(\d+)\s*(.+?)\s*(\d+)/gi],curtis:[/Parameter\s+(\d+)\s*\((.+?)\)\s*:\s*(\d+)/gi,/P(\d+)\s*\-\s*(.+?):\s*(\d+)/gi,/Param\s*(\d+)\s*[:=]\s*(\d+)/gi]},flexibleWhitespace:{functionValue:/F\.?\s*(?:No\.?)?\s*(\d{1,3})\s*(?:[:=\-]|\s+)\s*(\d{1,3})/gi,numberPair:/\b(\d{1,3})\s*[\s:=\-]+\s*(\d{1,3})\b/gi,tableRow:/^\s*(\d{1,3})(?:\s+|\s*[:=]\s*).*?(\d{1,3})\s*$/gim},inlinePatterns:{functionDescValueCnts:/(\d{1,3})\s+([A-Za-z][^0-9]+?)\s+(\d{1,3})\s+(\d{1,3})\s+Cnts/gi,fNumDescValueCnts:/F\.?\s*(\d{1,3})\s+([A-Za-z][^0-9]+?)\s+(\d{1,3})\s+(\d{1,3})\s+Cnts/gi,functionDescValueUnits:/(\d{1,3})\s+([A-Za-z][^0-9]+?)\s+(\d{1,3})\s+Units/gi,simpleInlinePairs:/(?:^|\s)(\d{1,3})\s+(?:[A-Za-z][^0-9]*?\s+)?(\d{1,3})(?:\s+(?:Cnts|Units|%|A|V|MPH))/gi},hudsGemstatsPatterns:{identicalValuesCnts:/(\d{1,3})\s+([A-Za-z][A-Za-z\s]+?)\s+(\d+)\s+\3\s+Cnts/gi,identicalValuesSpaced:/(\d{1,3})\s+([A-Za-z][A-Za-z\s]+?)\s+(\d+)\s+\3\s*Cnts/gi,flexibleIdentical:/(\d{1,3})\s+([A-Za-z][A-Za-z\s\-\_]+?)\s+(\d+)\s+\3\s+Cnts/gi}},this.functionDefinitions=this.initializeAllFunctions(),this.geFunctionNames={1:"MPH Scaling",3:"Controlled Acceleration",4:"Max Armature Current Limit",7:"Minimum Field Current",15:"Battery Volts",20:"MPH Overspeed",24:"Field Weakening Start"},this.debugMode=!0,this.detectedFormats=[],this.extractionLog=[]}initializeAllFunctions(){const t={1:{name:"MPH Scaling",range:[15,200],description:"Controls top speed scaling"},2:{name:"Creep Speed",range:[0,10],description:"Speed when barely pressing pedal"},3:{name:"Controlled Acceleration",range:[8,40],description:"Acceleration rate control"},4:{name:"Max Armature Current Limit",range:[180,400],description:"Maximum motor current"},5:{name:"Plug Current",range:[50,300],description:"Plug braking current"},6:{name:"Armature Acceleration Rate",range:[30,100],description:"Motor acceleration rate"},7:{name:"Minimum Field Current",range:[51,120],description:"Minimum field current for motor protection"},8:{name:"Maximum Field Current",range:[200,400],description:"Maximum field current"},9:{name:"Regen Armature Current",range:[150,350],description:"Regenerative braking current"},10:{name:"Regen Maximum Field Current",range:[51,300],description:"Max field current during regen"},11:{name:"Turf Speed Limit",range:[100,170],description:"Speed limit in turf mode"},12:{name:"Reverse Speed Limit",range:[120,170],description:"Maximum reverse speed"},13:{name:"Reserved",range:[0,255],description:"Reserved function"},14:{name:"IR Compensation",range:[2,20],description:"Internal resistance compensation"},15:{name:"Battery Volts",range:[48,96],description:"Nominal battery voltage"},16:{name:"Low Battery Volts",range:[40,80],description:"Low voltage cutoff"},17:{name:"Pack Over Temp",range:[0,255],description:"Battery pack over-temperature limit"},18:{name:"Reserved",range:[0,255],description:"Reserved function"},19:{name:"Field Ramp Rate Plug/Regen",range:[5,30],description:"Field current ramp rate"},20:{name:"MPH Overspeed",range:[25,50],description:"Overspeed protection threshold"},21:{name:"Arm Current Ramp (Handbrake)",range:[20,80],description:"Armature current ramp rate"},22:{name:"Odometer Calibration",range:[80,180],description:"Odometer calibration factor"},23:{name:"Error Compensation",range:[0,20],description:"Error detection compensation"},24:{name:"Field Weakening Start",range:[25,85],description:"Field weakening start point"},25:{name:"Pedal Enable",range:[0,1],description:"Pedal enable/disable"},26:{name:"Ratio of Field to Arm",range:[1,8],description:"Field to armature current ratio"}};for(let e=27;e<=128;e++)t[e]={name:`Function ${e}`,range:[0,255],description:`Extended controller function ${e}`};return t}log(t,e=null){this.debugMode&&console.log(`[PDF Parser] ${t}`,e||"")}warn(t,e=null){this.debugMode&&console.warn(`[PDF Parser] ${t}`,e||"")}error(t,e=null){console.error(`[PDF Parser] ${t}`,e||"")}async parsePDF(t){this.log("Starting PDF parsing",{fileName:t.name,fileSize:t.size});try{if(!t)throw new Error("No file provided for parsing");if(!(t instanceof File||t instanceof Blob))throw new Error("Invalid file object provided");if(t.name||(this.warn("File has no name property, using default"),t.name="unknown.pdf"),0===t.size)throw new Error("File is empty (0 bytes)");if(t.size>104857600)throw new Error("File too large (max 100MB)");if("undefined"==typeof pdfjsLib)throw new Error("PDF.js library not loaded - unable to process PDF files");let e,s;try{e=await t.arrayBuffer()}catch(t){throw new Error(`Failed to read file data: ${t.message}`)}if(!e||0===e.byteLength)throw new Error("Failed to read file content - file may be corrupted");try{s=await pdfjsLib.getDocument({data:e,verbosity:0,disableAutoFetch:!0,disableStream:!0}).promise}catch(t){throw t.message.includes("Invalid PDF")?new Error("Invalid PDF format - file may be corrupted or not a valid PDF"):t.message.includes("password")?new Error("PDF is password protected - please remove password protection"):new Error(`PDF loading failed: ${t.message}`)}if(!s||!s.numPages||0===s.numPages)throw new Error("PDF contains no pages or is corrupted");s.numPages>50&&this.warn(`Large PDF with ${s.numPages} pages - this may take longer to process`);const n={},i=[],r=[];for(let t=1;t<=s.numPages;t++)try{let e,a,o;this.log(`📄 Processing page ${t}/${s.numPages}`);try{e=await s.getPage(t),this.log(`✅ Page ${t} loaded successfully`)}catch(e){r.push(`Page ${t}: ${e.message}`),this.warn(`Failed to load page ${t}:`,e);continue}try{a=await e.getTextContent(),this.log(`📝 Page ${t} text content extracted: ${a.items?.length||0} items`)}catch(e){r.push(`Page ${t} text extraction: ${e.message}`),this.warn(`Failed to extract text from page ${t}:`,e);continue}if(!a||!a.items||0===a.items.length){this.warn(`Page ${t} contains no extractable text`);continue}try{o=this.extractTextFromPage(a),this.log(`🔤 Page ${t} raw text extracted (${o.length} chars):`,{textLength:o.length,textPreview:o.substring(0,500),containsFunctionNumbers:/F\.?(?:No\.?)?\s*\d+/.test(o),containsNumbers:/\d+/.test(o),containsCounts:/counts/i.test(o),containsValue:/value/i.test(o)}),this.debugMode&&o.length>0&&console.log(`📋 Page ${t} COMPLETE RAW TEXT:\n${o}`)}catch(e){r.push(`Page ${t} text processing: ${e.message}`),this.warn(`Failed to process text from page ${t}:`,e);continue}i.push({pageNum:t,text:o,textLength:o.length});try{this.log(`🔍 Starting pattern extraction for page ${t}`);const e=this.extractFromPage(o,t);e&&Object.keys(e).length>0?(Object.assign(n,e),this.log(`✅ Page ${t}: Found ${Object.keys(e).length} settings:`,e)):this.log(`❌ Page ${t}: No settings extracted from this page`)}catch(e){r.push(`Page ${t} extraction: ${e.message}`),this.warn(`Settings extraction failed for page ${t}:`,e)}}catch(e){r.push(`Page ${t}: ${e.message}`),this.warn(`Overall page processing failed for page ${t}:`,e);continue}if(0===i.length)throw new Error("No readable pages found in PDF - file may be corrupted or contain only images");if(0===Object.keys(n).length){throw 0===i.reduce(((t,e)=>t+e.textLength),0)?new Error("PDF contains no extractable text - may be a scanned document"):new Error("No controller settings found in recognizable format")}let a,o;try{a=this.validateExtractedSettings(n)}catch(t){throw new Error(`Settings validation failed: ${t.message}`)}if(0===a.validCount)throw new Error("No valid controller settings found - check PDF format");try{o=this.generateSettingsPreview(a.cleanSettings)}catch(t){this.warn("Preview generation failed:",t),o=[]}return{success:!0,settings:a.cleanSettings,preview:o,metadata:{fileName:t.name,pageCount:s.numPages,totalFunctions:Object.keys(a.cleanSettings).length,validFunctions:a.validCount,invalidFunctions:a.invalidCount,extractionMethods:["multi-pattern"],confidence:this.calculateOverallConfidence(a),parseDate:(new Date).toISOString()}}}catch(e){this.error("PDF parsing failed",e);const s=this.analyzeError(e,t);return{success:!1,error:s.userMessage,technicalError:e.message,suggestions:s.suggestions,formatExamples:this.getFormatExamples(),troubleshooting:this.getTroubleshootingSteps()}}}extractTextFromPage(t){try{if(!t)throw new Error("No text content provided");if(!t.items||!Array.isArray(t.items))throw new Error("Invalid text content structure - no items array");if(0===t.items.length)return this.warn("Page contains no text items"),"";const e=t.items;let s,n="",i=null;try{s=e.filter((t=>t&&void 0!==t.str&&t.transform&&Array.isArray(t.transform)&&t.transform.length>=6)).sort(((t,e)=>{try{const s=e.transform[5]-t.transform[5];return Math.abs(s)>3?s:t.transform[4]-e.transform[4]}catch(t){return this.warn("Error sorting text items:",t),0}}))}catch(t){this.warn("Failed to sort text items, using original order:",t),s=e.filter((t=>t&&void 0!==t.str))}return 0===s.length?(this.warn("No valid text items found after filtering"),""):(s.forEach(((t,e)=>{try{if(!t||"string"!=typeof t.str)return;const e=t.str.trim();if(!e)return;let s=null;t.transform&&Array.isArray(t.transform)&&t.transform.length>=6&&(s=t.transform[5]),null!==s&&null!==i&&Math.abs(i-s)>3?n+="\n":!n||n.endsWith(" ")||n.endsWith("\n")||(n+=" "),n+=e,null!==s&&(i=s)}catch(t){this.warn(`Error processing text item ${e}:`,t)}})),n?(n=n.replace(/\s+/g," ").trim(),n):(this.warn("No text extracted from page"),""))}catch(t){throw this.error("Text extraction failed:",t),new Error(`Text extraction failed: ${t.message}`)}}preprocessSingleLineText(t){this.log(`🔧 Preprocessing single-line text: ${t.substring(0,200)}...`);let e=t;return[/\s+Cnts\s+/g,/\s+Units\s+/g,/\s+%\s+(?=\d)/g,/\s+A\s+(?=\d)/g,/\s+V\s+(?=\d)/g,/\s+MPH\s+(?=\d)/g,/(?<=\d)\s+(?=\d{1,3}\s+[A-Za-z])/g].forEach(((t,s)=>{const n=e.split("\n").length;e=e.replace(t,"\n");const i=e.split("\n").length;i>n&&this.log(`🔧 Delimiter ${s+1} (${t.source}) created ${i-n} new lines`)})),e=e.replace(/(\d{1,3})\s+([A-Za-z][^0-9]*?)\s+(\d{1,3})\s+(\d{1,3})\s+/g,"$1 $2 $3 $4\n"),e=e.replace(/\s+F\.?\s*(?:No\.?)?\s*(\d{1,3})/g,"\nF.$1"),e=e.split("\n").map((t=>t.trim())).filter((t=>t.length>0)).join("\n"),this.log(`🔧 Preprocessing complete: ${t.split("\n").length} → ${e.split("\n").length} lines`),this.log("🔧 Sample processed lines:",e.split("\n").slice(0,5)),e}preprocessPDFText(t,e="unknown"){this.log(`🔧 Starting comprehensive text preprocessing for page ${e}`),this.log(`📝 Original text length: ${t.length} characters, lines: ${t.split("\n").length}`),this.log("🔧 Step 1: Normalizing whitespace...");let s=t.replace(/[ \t]+/g," ");this.log(`✅ Whitespace normalized (length: ${s.length})`);const n=this.detectSingleLineFormat(s);return this.log(`🔍 Single-line format detected: ${n}`),n?(this.log("🔧 Step 3: Splitting by 'Cnts' delimiter..."),s=this.splitByCnts(s),this.log(`✅ Split by Cnts complete (lines: ${s.split("\n").length})`),this.log("🔧 Step 4: Converting to multi-line format..."),s=this.convertToMultiLine(s),this.log(`✅ Multi-line conversion complete (lines: ${s.split("\n").length})`)):this.log("⏭️ Skipping single-line conversion - text already multi-line"),this.log("🔧 Step 5: Final text cleanup..."),s=this.finalTextCleanup(s),this.log(`✅ Final cleanup complete (length: ${s.length})`),this.logPreprocessedText(s,e),s}detectSingleLineFormat(t){const e=t.split("\n").length,s=t.includes("Cnts"),n=(t.match(/\d+\s+[A-Za-z]/g)||[]).length>1,i=e<=3&&t.length>100,r=s&&n&&i;return this.log("🔍 Single-line detection:",{lineCount:e,hasCnts:s,hasMultipleFunctions:n,isLongSingleLine:i,result:r}),r}splitByCnts(t){this.log("🔧 Splitting text by 'Cnts' delimiter...");const e=t.split(/(\s+Cnts\s*)/),s=[];for(let t=0;t<e.length;t+=2)if(e[t]&&e[t].trim()){const n=e[t].trim(),i=e[t+1]||"";n&&s.push(n+i.trim())}return this.log(`✅ Split into ${s.length} function entries`),this.log("📝 Function entries:",s.slice(0,3).map((t=>t.substring(0,50)+"..."))),s.join("\n")}convertToMultiLine(t){this.log("🔧 Converting single-line format to multi-line...");let e=t;e=e.replace(/(\d{1,3}\s+[A-Za-z][^0-9]*?\s+\d+\s+\d+\s+Cnts)\s+(?=\d{1,3}\s)/g,"$1\n"),e=e.replace(/(F\.?\s*(?:No\.?)?\s*\d{1,3}[^F]*?Cnts)\s+(?=F\.?\s*(?:No\.?)?\s*\d{1,3})/g,"$1\n");return[/(\s+Units)\s+(?=\d{1,3}\s+[A-Za-z])/g,/(\s+%)\s+(?=\d{1,3}\s+[A-Za-z])/g,/(\s+V)\s+(?=\d{1,3}\s+[A-Za-z])/g,/(\s+A)\s+(?=\d{1,3}\s+[A-Za-z])/g].forEach(((t,s)=>{const n=e.split("\n").length;e=e.replace(t,"$1\n");const i=e.split("\n").length;i>n&&this.log(`🔧 Split pattern ${s+1} created ${i-n} new lines`)})),e}finalTextCleanup(t){return this.log("🔧 Performing final text cleanup..."),t.split("\n").map((t=>t.trim())).filter((t=>t.length>0)).join("\n")}logPreprocessedText(t,e){if(!this.debugMode)return;const s=t.split("\n");this.log(`📊 Preprocessed text verification for page ${e}:`),this.log(`📝 Total lines: ${s.length}`),this.log(`📝 Total characters: ${t.length}`),this.log("📝 First 5 lines:"),s.slice(0,5).forEach(((t,e)=>{this.log(`   ${e+1}: "${t}"`)}));const n=s.filter((t=>/^\d{1,3}\s+[A-Za-z]/.test(t)||/^F\.?\s*\d{1,3}/.test(t)));this.log(`📝 Detected function lines: ${n.length}`),n.length>0&&(this.log("📝 Sample function lines:"),n.slice(0,3).forEach(((t,e)=>{this.log(`   ${e+1}: "${t}"`)})));const i={Cnts:(t.match(/Cnts/g)||[]).length,Units:(t.match(/Units/g)||[]).length,"F.":(t.match(/F\./g)||[]).length,Numbers:(t.match(/\d+/g)||[]).length};this.log("📝 Pattern counts:",i);const r=n.length>0&&s.length>1;this.log("📝 Format verification: "+(r?"✅ GOOD":"❌ NEEDS REVIEW")),r||(this.log("⚠️ Text may need manual review. Raw text sample:"),this.log(`   "${t.substring(0,300)}..."`))}extractFromPage(t,e){const s={};this.log(`🔍 Starting pattern extraction for page ${e} (text length: ${t.length})`),this.log("🔧 Starting comprehensive text preprocessing...");const n=t;if(t=this.preprocessPDFText(t,e),this.debugMode&&this.log(`📝 Text preprocessing complete for page ${e}:`,{originalLength:n.length,processedLength:t.length,originalLines:n.split("\n").length,processedLines:t.split("\n").length,firstLine:t.split("\n")[0]||"",wordCount:t.split(/\s+/).length,hasTableStructure:t.includes("F.No.")||t.includes("Function")||t.includes("Counts"),textSample:t.substring(0,200)+(t.length>200?"...":"")}),this.debugMode){this.log("🧪 Running comprehensive pattern test for debugging:");const s=this.testAllPatterns(t,e);this.log("📊 Pattern test completed:",s)}this.log(`🧪 Testing GE Sentry format patterns on page ${e}`);const i=this.extractGESentryFormat(t,e);if(Object.keys(i).length>0?(Object.assign(s,i),this.log(`✅ GE Sentry format found ${Object.keys(i).length} settings on page ${e}:`,i)):this.log(`❌ No GE Sentry format matches found on page ${e}`),Object.keys(s).length<5){this.log(`🧪 Testing HudsGemstats format patterns on page ${e} (current count: ${Object.keys(s).length})`);const n=this.extractHudsGemstatsFormat(t,e);Object.keys(n).length>0?(Object.assign(s,n),this.log(`✅ HudsGemstats format found ${Object.keys(n).length} settings on page ${e}:`,n)):this.log(`❌ No HudsGemstats format matches found on page ${e}`)}else this.log(`⏭️ Skipping HudsGemstats patterns - already found ${Object.keys(s).length} settings`);if(Object.keys(s).length<5){this.log(`🧪 Testing flexible function patterns on page ${e} (current count: ${Object.keys(s).length})`);const n=this.extractFlexibleFunctions(t,e);Object.keys(n).length>0?(Object.assign(s,n),this.log(`✅ Flexible patterns found ${Object.keys(n).length} settings on page ${e}:`,n)):this.log(`❌ No flexible pattern matches found on page ${e}`)}else this.log(`⏭️ Skipping flexible patterns - already found ${Object.keys(s).length} settings`);if(Object.keys(s).length<5){this.log(`🧪 Testing inline format patterns on page ${e} (current count: ${Object.keys(s).length})`);const n=this.extractInlineFormat(t,e);Object.keys(n).length>0?(Object.assign(s,n),this.log(`✅ Inline format found ${Object.keys(n).length} settings on page ${e}:`,n)):this.log(`❌ No inline format matches found on page ${e}`)}else this.log(`⏭️ Skipping inline patterns - already found ${Object.keys(s).length} settings`);if(Object.keys(s).length<5){this.log(`🧪 Testing simple format patterns on page ${e} (current count: ${Object.keys(s).length})`);const n=this.extractSimpleFormat(t,e);Object.keys(n).length>0?(Object.assign(s,n),this.log(`✅ Simple format found ${Object.keys(n).length} settings on page ${e}:`,n)):this.log(`❌ No simple format matches found on page ${e}`)}else this.log(`⏭️ Skipping simple patterns - already found ${Object.keys(s).length} settings`);return this.log(`📊 Page ${e} extraction summary: ${Object.keys(s).length} total settings found`),s}extractGESentryFormat(t,e="unknown"){const s={};this.log(`🔍 Starting GE Sentry format extraction for page ${e}`);const n=this.patterns.geSentryComplete;this.log(`🧪 Testing pattern 1 (geSentryComplete): ${n.source}`);let i=[...t.matchAll(n)];if(this.log(`📊 Pattern 1 found ${i.length} matches`),i.length>0&&this.log(`🔍 Processing ${i.length} geSentryComplete matches:`,i.map((t=>t[0]))),i.forEach(((t,e)=>{const n=parseInt(t[1]),i=parseInt(t[4])||parseInt(t[3]);this.log(`🧪 Match ${e+1}: Function ${n}, Value ${i} (valid: ${this.isValidFunction(n)&&this.isValidValue(i)})`),this.isValidFunction(n)&&this.isValidValue(i)?(s[n]=i,this.log(`✅ Added setting: F.${n} = ${i}`)):this.log(`❌ Rejected: F.${n} = ${i} (invalid function or value)`)})),Object.keys(s).length<5){const e=this.patterns.geSentrySimple;this.log(`🧪 Testing pattern 2 (geSentrySimple): ${e.source}`),i=[...t.matchAll(e)],this.log(`📊 Pattern 2 found ${i.length} matches`),i.length>0&&this.log(`🔍 Processing ${i.length} geSentrySimple matches:`,i.map((t=>t[0]))),i.forEach(((t,e)=>{const n=parseInt(t[1]),i=parseInt(t[2]);this.log(`🧪 Match ${e+1}: Function ${n}, Value ${i} (valid: ${this.isValidFunction(n)&&this.isValidValue(i)}, exists: ${!!s[n]})`),this.isValidFunction(n)&&this.isValidValue(i)&&!s[n]?(s[n]=i,this.log(`✅ Added setting: F.${n} = ${i}`)):this.log(`❌ Rejected: F.${n} = ${i} (invalid, duplicate, or already exists)`)}))}else this.log(`⏭️ Skipping geSentrySimple - already found ${Object.keys(s).length} settings`);return this.log(`📊 GE Sentry extraction completed: ${Object.keys(s).length} settings found`),s}extractFlexibleFunctions(t,e="unknown"){const s={};return this.log(`🔍 Starting flexible function extraction for page ${e}`),this.patterns.functionVariations.forEach(((e,n)=>{this.log(`🧪 Testing flexible pattern ${n+1}: ${e.source}`);const i=[...t.matchAll(e)];this.log(`📊 Flexible pattern ${n+1} found ${i.length} matches`),i.length>0&&this.log(`🔍 Processing ${i.length} matches from pattern ${n+1}:`,i.map((t=>t[0]))),i.forEach(((t,e)=>{const i=parseInt(t[1]),r=parseInt(t[2]);this.log(`🧪 Pattern ${n+1}, Match ${e+1}: Function ${i}, Value ${r} (valid: ${this.isValidFunction(i)&&this.isValidValue(r)}, exists: ${!!s[i]})`),this.isValidFunction(i)&&this.isValidValue(r)&&!s[i]?(s[i]=r,this.log(`✅ Added setting from pattern ${n+1}: F.${i} = ${r}`)):this.log(`❌ Rejected from pattern ${n+1}: F.${i} = ${r} (invalid, duplicate, or already exists)`)}))})),this.log(`📊 Flexible function extraction completed: ${Object.keys(s).length} settings found`),s}extractSimpleFormat(t,e="unknown"){const s={};return this.log(`🔍 Starting simple format extraction for page ${e}`),this.patterns.simpleFormat.forEach(((e,n)=>{this.log(`🧪 Testing simple pattern ${n+1}: ${e.source}`);const i=[...t.matchAll(e)];this.log(`📊 Simple pattern ${n+1} found ${i.length} matches`),i.length>0&&this.log(`🔍 Processing ${i.length} matches from simple pattern ${n+1}:`,i.map((t=>t[0]))),i.forEach(((t,e)=>{const i=parseInt(t[1]),r=parseInt(t[2]);this.log(`🧪 Simple pattern ${n+1}, Match ${e+1}: Function ${i}, Value ${r} (valid: ${this.isValidFunction(i)&&this.isValidValue(r)}, exists: ${!!s[i]})`),this.isValidFunction(i)&&this.isValidValue(r)&&!s[i]?(s[i]=r,this.log(`✅ Added setting from simple pattern ${n+1}: F.${i} = ${r}`)):this.log(`❌ Rejected from simple pattern ${n+1}: F.${i} = ${r} (invalid, duplicate, or already exists)`)}))})),this.log(`📊 Simple format extraction completed: ${Object.keys(s).length} settings found`),s}extractInlineFormat(t,e="unknown"){const s={};return this.log(`🔍 Starting inline format extraction for page ${e}`),Object.entries(this.patterns.inlinePatterns).forEach((([e,n])=>{this.log(`🧪 Testing inline pattern (${e}): ${n.source}`);const i=[...t.matchAll(n)];this.log(`📊 Inline pattern ${e} found ${i.length} matches`),i.length>0&&this.log(`🔍 Processing ${i.length} matches from ${e}:`,i.map((t=>t[0]))),i.forEach(((t,n)=>{let i,r;"functionDescValueCnts"===e||"functionDescValueUnits"===e||"fNumDescValueCnts"===e?(i=parseInt(t[1]),r=parseInt(t[4])||parseInt(t[3])):"simpleInlinePairs"===e&&(i=parseInt(t[1]),r=parseInt(t[2])),this.log(`🧪 Inline pattern ${e}, Match ${n+1}: Function ${i}, Value ${r} (valid: ${this.isValidFunction(i)&&this.isValidValue(r)}, exists: ${!!s[i]})`),this.isValidFunction(i)&&this.isValidValue(r)&&!s[i]?(s[i]=r,this.log(`✅ Added setting from inline pattern ${e}: F.${i} = ${r}`)):this.log(`❌ Rejected from inline pattern ${e}: F.${i} = ${r} (invalid, duplicate, or already exists)`)}))})),this.log(`📊 Inline format extraction completed: ${Object.keys(s).length} settings found`),s}extractHudsGemstatsFormat(t,e="unknown"){const s={};return this.log(`🔍 Starting HudsGemstats format extraction for page ${e}`),Object.entries(this.patterns.hudsGemstatsPatterns).forEach((([e,n])=>{this.log(`🧪 Testing HudsGemstats pattern (${e}): ${n.source}`);const i=[...t.matchAll(n)];this.log(`📊 HudsGemstats pattern ${e} found ${i.length} matches`),i.length>0&&this.log(`🔍 Processing ${i.length} matches from ${e}:`,i.map((t=>t[0]))),i.forEach(((t,n)=>{const i=parseInt(t[1]),r=t[2].trim(),a=parseInt(t[3]);if(this.log(`🧪 HudsGemstats pattern ${e}, Match ${n+1}:`),this.log(`   Function: ${i}, Name: "${r}", Value: ${a}`),this.log(`   Full match: "${t[0]}"`),this.log(`   Valid: ${this.isValidFunction(i)&&this.isValidValue(a)}, Exists: ${!!s[i]}`),this.isValidFunction(i)&&this.isValidValue(a)&&!s[i])s[i]=a,this.log(`✅ Added HudsGemstats setting: F.${i} = ${a} (${r})`);else{const t=this.isValidFunction(i)?this.isValidValue(a)?s[i]?"already exists":"unknown":"invalid value":"invalid function";this.log(`❌ Rejected HudsGemstats setting: F.${i} = ${a} (${t})`)}}))})),this.log(`📊 HudsGemstats format extraction completed: ${Object.keys(s).length} settings found`),s}validateExtractedSettings(t){const e={};let s=0,n=0;return Object.entries(t).forEach((([t,i])=>{const r=parseInt(t),a=parseInt(i);this.isValidFunction(r)&&this.isValidValue(a)?(e[r]=a,s++):n++})),{cleanSettings:e,validCount:s,invalidCount:n,totalProcessed:Object.keys(t).length}}generateSettingsPreview(t){const e=[];return Object.keys(t).map((t=>parseInt(t))).sort(((t,e)=>t-e)).forEach((s=>{const n=this.functionDefinitions[s];e.push({function:s,name:n?.name||`Function ${s}`,value:t[s],description:n?.description||"",range:n?.range||[0,255],isInRange:this.isValueInRange(t[s],n?.range||[0,255])})})),e}isValidFunction(t){return Number.isInteger(t)&&t>=1&&t<=128}isValidFunctionNumber(t){return this.isValidFunction(t)}isValidValue(t){return Number.isInteger(t)&&t>=0&&t<=999}isValidCountsValue(t){return this.isValidValue(t)}isValueInRange(t,e){return!e||2!==e.length||t>=e[0]&&t<=e[1]}calculateOverallConfidence(t){const e=t.totalProcessed,s=t.validCount;if(0===e)return 0;let n=s/e;return s>20&&(n+=.1),s>50&&(n+=.1),Math.min(n,1)}analyzeError(t,e){const s=t.message.toLowerCase();let n="unknown",i="",r=[];return s.includes("invalid pdf")||s.includes("corrupted")?(n="corrupted",i="❌ This PDF file appears to be corrupted or not a valid PDF.",r=["Try re-downloading the PDF from your controller software","Check if the file opens correctly in a PDF viewer","Export a new copy from your GEM programmer software"]):s.includes("password")||s.includes("encrypted")?(n="password_protected",i="🔒 This PDF is password protected and cannot be read.",r=["Remove the password protection from the PDF","Export an unprotected version from your programming software"]):(n="format",i="📋 Unable to find GEM controller settings in the expected format.",r=["Make sure this PDF contains GEM controller function settings","Look for a table with F.1, F.2, etc. and corresponding values"]),r.push("Use manual entry to input the 7 most important settings"),{errorType:n,userMessage:i,suggestions:r}}getFormatExamples(){return[{title:"GE Sentry Export Format",description:"Exported from Sentry programming software",example:"F.No. Function Description    Counts Value Units\nF.No.1  MPH Scaling            100    100   %\nF.No.3  Controlled Acceleration 15     15   Amps/Sec\nF.No.4  Max Armature Current   245    245   Amps"},{title:"Simple Table Format",description:"Basic function number and value pairs",example:"Function  Value\nF.1       100\nF.3       15\nF.4       245"}]}getTroubleshootingSteps(){return[{step:1,title:"Check PDF Content",description:"Verify it contains a table with function numbers and values"},{step:2,title:"Verify File Source",description:"Ensure exported directly from programming software"},{step:3,title:"Use Manual Entry",description:"Enter the 7 most critical settings manually"}]}testAllPatterns(t,e="unknown"){this.log(`🧪 COMPREHENSIVE PATTERN TEST for page ${e}`),this.log(`📝 Testing against text snippet: "${t.substring(0,200)}..."`);let s=0;this.log("🔍 Testing GE Sentry patterns:");const n=[...t.matchAll(this.patterns.geSentryComplete)];this.log(`  - geSentryComplete (${this.patterns.geSentryComplete.source}): ${n.length} matches`),n.length>0&&n.slice(0,3).forEach(((t,e)=>{this.log(`    Match ${e+1}: "${t[0]}" → F.${t[1]} = ${t[4]||t[3]}`)})),s+=n.length;const i=[...t.matchAll(this.patterns.geSentrySimple)];this.log(`  - geSentrySimple (${this.patterns.geSentrySimple.source}): ${i.length} matches`),i.length>0&&i.slice(0,3).forEach(((t,e)=>{this.log(`    Match ${e+1}: "${t[0]}" → F.${t[1]} = ${t[2]}`)})),s+=i.length,this.log("🔍 Testing flexible function patterns:"),this.patterns.functionVariations.forEach(((e,n)=>{const i=[...t.matchAll(e)];this.log(`  - Pattern ${n+1} (${e.source}): ${i.length} matches`),i.length>0&&i.slice(0,2).forEach(((t,e)=>{this.log(`    Match ${e+1}: "${t[0]}" → F.${t[1]} = ${t[2]}`)})),s+=i.length})),this.log("🔍 Testing simple format patterns:"),this.patterns.simpleFormat.forEach(((e,n)=>{const i=[...t.matchAll(e)];this.log(`  - Simple ${n+1} (${e.source}): ${i.length} matches`),i.length>0&&i.slice(0,2).forEach(((t,e)=>{this.log(`    Match ${e+1}: "${t[0]}" → ${t[1]} = ${t[2]}`)})),s+=i.length})),this.log("🔍 Testing for common indicators:");const r=t.match(/F\.?\s*(?:No\.?)?\s*\d+/gi)||[],a=t.match(/\d+\s*[:=\-]\s*\d+/g)||[],o=t.match(/function|counts|value|setting/gi)||[];this.log(`  - Function indicators (F.1, F.No.1, etc.): ${r.length}`),r.length>0&&this.log(`    Examples: ${r.slice(0,5).join(", ")}`),this.log(`  - Number pairs (123:456, 1=2, etc.): ${a.length}`),a.length>0&&this.log(`    Examples: ${a.slice(0,5).join(", ")}`),this.log(`  - Table headers (function, counts, value, etc.): ${o.length}`),o.length>0&&this.log(`    Found: ${o.slice(0,5).join(", ")}`),this.log("🔍 Line-by-line analysis of first 10 lines:");return t.split("\n").slice(0,10).forEach(((t,e)=>{if(t.trim()){const s=/\d+/.test(t),n=/F\.?/i.test(t),i=/:/.test(t),r=/=/.test(t);this.log(`  Line ${e+1}: "${t.trim()}" [numbers:${s}, F.:${n}, ::${i}, =:${r}]`)}})),this.log("📊 PATTERN TEST SUMMARY:"),this.log(`  - Total regex matches found: ${s}`),this.log(`  - Function indicators: ${r.length}`),this.log(`  - Number pairs: ${a.length}`),this.log(`  - Table headers: ${o.length}`),this.log(`  - Text length: ${t.length} characters`),this.log(`  - Non-empty lines: ${t.split("\n").filter((t=>t.trim())).length}`),0===s&&0===r.length&&0===a.length?(this.log("❌ NO PATTERNS MATCHED - This suggests:"),this.log("  - PDF may contain scanned images instead of text"),this.log("  - Text may be in an unexpected format"),this.log("  - Settings may be embedded in non-standard layout"),this.log("  - PDF may not contain controller settings")):0===s&&r.length>0?(this.log("⚠️ FUNCTION INDICATORS FOUND but no regex matches - This suggests:"),this.log("  - Settings are present but in non-standard format"),this.log("  - May need custom pattern for this specific PDF format"),this.log("  - Values may be separated by unusual characters or spacing")):s>0&&this.log("✅ PATTERNS FOUND - PDF contains recognizable controller settings"),{totalMatches:s,functionIndicators:r.length,numberPairs:a.length,tableHeaders:o.length,textLength:t.length,nonEmptyLines:t.split("\n").filter((t=>t.trim())).length}}}"undefined"!=typeof module&&module.exports?module.exports=PDFParser:"undefined"!=typeof window&&(window.PDFParser=PDFParser);